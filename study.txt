[필기장]

*객체 지향의 핵심은 다형성이지만 다형성만으로는 SOLID를 모두 지킬 수 없다.
*SOLID 원칙은 면접에서도 많이 나오는 개념이다. 중요!
*기능을 확장할 가능성이 없다면, 구현 클래스를 직접 사용하고 향후 꼭 필요할 때 리팩토링을 통해서 인터페이스를 도입하는 것도 좋다. (인터페이스를 도입하면 추상화라는 비용이 발생하기 때문)

⭐학습이 아닌, 실제 프로젝트에서는 테스트 케이스에 출력문 남기지 않기 !

+----------------------------------------------------------------------------------------------------------------------------------------------+
⭐좋은 객체지향프로그래밍
- 다형성이 가장 중요하다!
- 역할과 구현을 분리하여 유연하고 변경이 용이하다. (ex. 자동차 역할 / KIA 자동차 구현, 현대 자동차 구현 ⇒ KIA 자동차를 타다가 현대 자동차로 바껴도 운전자(클라이언트)는 무엇을 따로 배울 필요없이 운전이 가능하다.)
   ↳ 클라이언트는 역할만 알면 된다.
     클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
     클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.
     클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.
      ⇒ 역할 : 인터페이스 / 구현 : 인터페이스를 구현한 클래스, 구현 객체
        💡객체 설계 시, 인터페이스를 먼저 부여하고 그 역할을 수행하는 구현 객체 만들기
- 다형성_오버라이딩을 사용하여 역할과 구현을 분리
   ⇒ 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.
- 스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.
   ⇒ 스프링의 제어의 역전(IoC), 의존관계 주입(DI)은 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원한다.
🚨인터페이스(역할) 자체가 변하면 클라이언트, 서버 모두에 큰 변경이 발생한다. ⇒ 인터페이스를 안정적으로 잘 설계하는 것이 중요!!

⭐좋은 객체지향 설계의 5가지 원칙(SOLID)
  (클린코드로 유명한 '로버트 마틴'이 정리한 좋은 객체지향 설계의 5가지 원칙)
📌면접에서도 많이 나온다.
- SRP (단일 책임 원칙  Single Responsibility Principle)
  ·한 클래스는 하나의 책임만 가져야 한다. (하나의 책임이라는 것은 모호하다. 클 수 있고 작을 수 있다. 문맥과 상황에 따라 다르다.)
  ·중요한 기준은 변경이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것이다.
- OCP (개방-폐쇄 원칙  Open/Closed Principle)
  *가장 중요한 원칙이다.
  ·소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
  ·다형성을 활용 (역할과 구현의 분리)
  ·인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현
  ·구현 객체를 변경하려면 클라이언트 코드를 변경해야 한다. ⇒ OCP 원칙 지킬 수 없다.
   // private MemberRepository memberRepository = new MemoryMemberRepository();
   private MemberRepository memberRepository = new JdbcMemberRepository();
    ↳ 이 문제를 해결하기 위해, 객체를 생성하고 연관관계를 맺어주는 별도의 조립, 설정자가 필요하다. (나중에 코드를 통해 학습)
- LSP (리스코프 치환 원칙  Liskov Substitution Principle)
  ·프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
  ·다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것이다.
  ·다형성을 지원하기 위한 원칙이다.
  ·인터페이스를 구현한 구현체를 믿고 사용하려면 이 원칙이 필요하다.
  ·LSP 원칙을 지키지 않아도 컴파일 에러는 발생하지 않는다. 컴파일 성공하는 것을 넘어서는 이야기이다.
  ·ex) 자동차 인터페이스의 앞으로 가라는 엑셀 기능을 뒤로 가게 구현한다면 LSP 원칙을 위반한 것이다.
- ISP (인터페이스 분리 원칙  Interface Segregation Principle)
  ·특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
  ·자동차 인터페이스 → 운전 인터페이스, 정비 인터페이스로 분리
  ·사용자 클라이언트 → 운전자 클라이언트, 정비사 클라이언트로 분리
  ·분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않는다.
  ·인터페이스가 명확해지고, 대체 가능성이 높아진다.
- DIP (의존관계 역전 원칙  Dependency Inversion Principle)
  *OCP 원칙과 연관성이 있고 이 원칙도 중요하다.
  ·프로그래머는 추상화에 의존해야하고 구체화에 의존하면 안된다. 의존성 주입(DI)은 이 원칙을 따르는 방법 중 하나이다.
  ·구현 클래스에 의존하지 말고 인터페이스(역할)에 의존하라는 의미이다.
  ·클라이언트가 인터페이스에 의존해야 유연하게 구현체를 변경할 수 있다. 구현체에 의존하게 되면 변경이 아주 어려워진다.
  ·OCP 원칙을 위반하는 부분의 코드가 DIP 원칙도 위반한다. ↓
   private MemberRepository memberRepository = new MemoryMemberRepository();
   (인터페이스(MemberRepository)에 의존하지만, 구현 클래스(MemoryMemberRepository)도 동시에 의존하기 때문)
 ⇒ 다형성 만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경된다. (다형성만으로는 OCP, DIP 원칙을 지킬 수 없다.)

*객체지향 설계와 스프링
- 스프링은 아래의 기술로 다형성 + OCP, DIP를 가능하게 지원해준다.
   ↳ DI(Dependency Injection) : 의존 관계, 의존성 주입
     DI 컨테이너 제공
- 클라이언트 코드의 변경 없이 기능 확장
- 쉽게 부품 교체하듯이 개발

*비즈니스 요구사항과 설계
- 요구사항과 설계에서 확정되지 않은 부분을 확정될 때까지 무기한 기다릴 수 없기 때문에, 인터페이스를 만들고 구현체를 언제든지 갈아끼울 수 있도록 설계할 것이다.

‼️구현체를 만들 때, 구현체가 하나이면 관례상 클래스 이름에 "Impl"을 붙인다.

*회원(Member) 도메인 설계 및 개발
!! src > main > java > ... > member > *
- 회원 등급은 "일반"과 "VIP" 두 가지가 있다.
   ⇒ (enum) Grade.java
- 회원 정보로는 id, name, grade가 있다.
   ⇒ (회원 도메인?) Member.java   // 생성자와 getter, setter
- 일단, 메모리 회원 저장소를 사용했다.
   ⇒ (interface) MemberRepository.java
     (class) MemoryMemberRepository.java
- 회원 서비스는 "회원 가입"과 "회원 조회"가 가능하다.
   ⇒ (interface) MemberService.java
     (class) MemberServiceImpl.java

*주문(Order)과 할인(DiscountPolicy) 도메인 설계 및 개발
!! src > main > java > ... > discount > *
!! src > main > java > ... > order > *
- 회원 등급에 따라 할인 정책을 적용할 수 있다. → VIP 등급은 1000원 할인해주는 고정 금액 할인을 적용한다.
   ⇒ (interface) DiscountPolicy.java
     (class) FixDiscountPolicy.java
- 회원은 상품을 주문할 수 있다.
   ⇒ (interface) OrderService.java
     (class) OrderServiceImpl.java
- 주문 정보로는 회원id, 상품명, 상품가격, 할인가격이 있다. → DiscountPolicy의 구현체를 통해 할인가격을 추출하여 보내야한다.
   ⇒ (주문 도메인?) Order.java   // 생성자와 getter, setter과 할인 적용된 가격 반환해주는 메서드, toString()

*관심사의 분리
!! src > main > java > hello.core > AppConfig.java
!! src > main > java > ... > member > MemberServiceImpl.java
!! src > main > java > ... > order > OrderServiceImpl.java
- ex)하나의 공연이 애플리케이션, 각각의 배역(배우 역할)이 인터페이스라고 가정했을 때, 배역에 맞는 배우를 선택하는 것을 배우가 하진 않는다.
     공연 기획자와 배우의 책임을 확실히 분리하듯이 관심사를 분리해야 한다.
*AppConfig
  ↳ 애플리케이션의 전체 동작 방식을 구성(config)하기 위해, 구현 객체를 생성하고, 연결하는 책임을 가지는 별도의 설정 클래스 생성
⭐️생성자 주입을 이용해 인터페이스만 의존하여 DIP 원칙을 지킨다.
⭐️생성자를 통해서 어떤 구현 객체를 주입할지는 오직 외부(AppConfig)에서 결정된다. 구현 객체는 실행에만 집중하면 된다.
- AppConfig는 애플리케이션의 실제 동작에 필요한 구현 객체를 생성한다. (AppConfig 파일에서의 new 구현 객체 부분)
- AppConfig는 생성한 객체 인스턴스의 참조를 생성자를 통해서 주입(연결) 해준다.
   ↳ MemberServiceImpl → MemoryMemberRepository
     OrderServiceImpl → MemoryMemberRepository, FixDiscountPolicy
- 실행 부분도 AppConfig 사용해서 수정
   ↳ src > main > java > hello.core > MemberApp.java
     src > main > java > hello.core > OrderApp.java
- 테스트 부분도 AppConfig 사용해서 수정
   ↳ src > main > java > ... > member > MemberServiceTest.java
     src > test > java > ... > order > OrderServiceTest.java
- AppConfig를 사용함으로써 애플리케이션이 사용 영역과 구성 영역으로 분리되었다.
   ⇒ 구현 객체 변경이 필요하면 AppConfig(구성 영역)만 수정하면 된다.
     클라이언트 코드 수정x
     OCP, DIP 원칙 모두 지켜진다.

*IoC (제어의 역전  Inversion of Control)
- 기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 구현 객체를 생성하고, 연결하고, 실행했다.
- AppConfig를 사용함으로써 프로그램의 제어 흐름은 AppConfig가 가지게 된다. (ex.OrderServiceImpl.java는 필요한 인터페이스들을 호출하지만 어떤 구현 객체들이 실행될지는 모른다.)
- 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전(IoC)이라 한다.
- 프레임워크와 라이브러리의 차이가 제어의 역전에 해당하는 것이다.
   ⇒ 프레임워크 : 내가 작성한 코드를 제어하고, 대신 실행하면 프레임워크이다.
     라이브러리 : 내가 작성한 코드가 직접 제어의 흐름을 담당한다면 라이브러리이다. (init으로 호출)

*DI (의존관계 주입  Dependency Injection)
- 정적인 클래스 의존관계 ⇒ 클래스 다이어그램
   : 클래스가 사용하는 Import 코드만 보고 의존관계를 쉽게 판단할 수 있다. 애플리케이션을 실행하지 않아도 분석할 수 있다.
- 동적인 객체 인스턴스 의존 관계 ⇒ 객체 다이어그램
   : 애플리케이션 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 의존 관계다.
- 애플리케이션 실행 시점(런타임)에 외부에서 실제 구현 객체를 생성하고 클라이언트에 전달해서 클라이언트와 서버의 실제 의존관계가 연결 되는 것을 의존관계 주입이라 한다.
- 의존관계 주입을 사용하면 클라이언트 코드를 변경하지 않고, 클라이언트가 호출하는 대상의 타입 인스턴스를 변경할 수 있다.
   = 의존관계 주입을 사용하면 정적인 클래스 의존관계를 변경하지 않고, 동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있다.

*IoC 컨테이너, DI 컨테이너
- AppConfig처럼 객체를 생성하고 관리하면서 의존관계를 연결해 주는 것을 IoC 컨테이너 또는 DI 컨테이너라고 한다. (의존관계 주입에 초점을 맞추어 최근에는 주로 DI 컨테이너라고 부른다.)


*순수 자바 → 스프링으로 전환
!! src > main > java > hello.core > MemberApp.java
   src > main > java > hello.core > OrderApp.java
- ApplicationContext : 스프링 컨테이너 (Bean을 관리해준다.)
- 기존에는 개발자가 AppConfig 를 사용해서 직접 객체를 생성하고 DI를 했지만, 이제부터는 스프링 컨테이너를 통해서 사용한다.
- 스프링 컨테이너는 @Configuration 이 붙은 AppConfig 를 설정(구성) 정보로 사용한다.
   →  @Bean 이라 적힌 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너에 등록한다.
   → 스프링 컨테이너에 등록된 객체를 스프링 빈이라 한다.
- 스프링 빈은 @Bean 이 붙은 메서드의 명을 스프링 빈의 이름으로 사용한다. (memberService, orderService)
- 이전에는 개발자가 필요한 객체를 AppConfig 를 사용해서 직접 조회했지만, 이제부터는 스프링 컨테이너를 통해서 필요한 스프링 빈(객체)를 찾아야 한다. 스프링 빈은 applicationContext.getBean() 메서드를 사용해서 찾을 수 있다.
 ⇒ 기존에는 개발자가 직접 자바코드로 모든 것을 했다면 이제부터는 스프링 컨테이너에 객체를 스프링 빈으로 등록하고, 스프링 컨테이너에서 스프링 빈을 찾아서 사용하도록 변경되었다.

*스프링 컨테이너
- ApplicationContext 를 스프링 컨테이너라고 하고, ApplicationContext 는 인터페이스이다.
- new AnnotationConfigApplicationContext(AppConfig.class); 이 클래스는 ApplicationContext 인터페이스의 구현체이다.
- 스프링 컨테이너는 XML 기반으로 만들 수 있고, 어노테이션 기반의 자바 설정 클래스로 만들 수 있다. (AppConfig 를 사용했던 방식이 어노테이션 기반의 자바 설정 클래스로 스프링 컨테이너를 만든 것이다.)

*스프링 컨테이너 생성 과정
- 스프링 컨테이너를 생성할 때는 구성 정보를 지정해주어야 한다.
  ( new AnnotationConfigApplicationContext(AppConfig.class) )
   ↳ 여기서는 AppConfig.class 를 구성 정보로 지정했다.
- 스프링 컨테이너는 파라미터로 넘어온 설정 클래스 정보를 사용해서 스프링 빈을 등록한다.
- 빈 이름은 메서드 이름을 사용한다.
- 빈 이름을 직접 부여할 수도 있다. ⇒ @Bean(name='memberService2')
‼️빈 이름은 항상 다른 이름을 부여해야 한다. (같은 이름을 부여하면, 다른 빈이 무시되거나 기존 빈을 덮어버리거나 설정에 따라 오류가 발생한다.)
- 스프링 컨테이너는 설정 정보를 참고해서 의존관계를 주입(DI) 한다.
- 스프링은 빈을 생성하고, 의존관계를 주입하는 단계가 나누어져 있다.
   ↳ 그런데 지금처럼 자바 코드로 스프링 빈을 등록하면 생성자를 호출하면서 의존관계 주입도 한번에 처리된다.

*스프링 빈 조회
(거의 사용하진 않는다. 학습용으로 해본 것.)
- 스프링 컨테이너에 등록된 모든 빈 조회
!! src > test > java > ... > beanfind > ApplicationContextInfoTest.java
- 기본 조회
!! src > test > java > ... > beanfind > ApplicationContextBasicTest.java
   ↳ ac.getBean(빈이름, 타입)  /  ac.getBean(타입)
- 동일 타입 조회
!! src > test > java > ... > beanfind > ApplicationContextSameBeanFindTest.java
   ↳ 타입으로 조회 시 같은 타입이 둘 이상 있으면, 빈 이름을 지정하면 된다.
- 상속 관계 조회 (**중요)
!! src > test > java > ... > beanfind > ApplicationContextExtendsFindTest.java
   ↳ 부모 타입으로 조회하면 자식 타입도 함께 조회된다.

*BeanFactory와 ApplicationContext
- ApplicationContext는 BeanFactory에서 부가 기능을 더한 것.
- BeanFactory
  ·스프링 컨테이너의 최상위 인터페이스이다.
  ·스프링 빈을 관리하고 조회하는 역할을 담당한다. (getBean)
  ·지금까지 사용했던 대부분의 기능은 BeanFactory 가 제공하는 기능이다.
- ApplicationContext
  ·BeanFactory 기능을 모두 상속받아서 제공한다.
  ·ApplicationContext 가 제공하는 부가기능
    ↳ 메시지소스를 활용한 국제화 기능 (한국에서 들어오면 한국어로 출력, 영어권에서 들어오면 영어로 출력)
      환경변수 (로컬, 개발, 운영 등을 구분해서 처리)
      애플리케이션 이벤트 (이벤트를 발행하고 구독하는 모델을 편리하게 지원)
      편리한 리소스 조회 (파일, 클래스패스, 외부 등에서 리소스를 편리하게 조회)
 ⇒ ApplicationContext 는 BeanFactory 의 기능을 상속받는다.
   ApplicationContext 는 빈 관리기능 + 편리한 부가기능을 제공한다.
   BeanFactory 를 직접 사용할 일은 거의 없다. 부가기능이 포함된 ApplicationContext 를 사용한다.
   💡BeanFactory 나 ApplicationContext 를 스프링 컨테이너라고 한다.

*다양한 설정 형식 지원 - 자바 코드, XML
- 어노테이션 기반 자바 코드 설정 사용
  : 지금까지 진행한 것.
    AnnotationConfigApplicationContext 클래스를 사용하면서 자바 코드로 된 설정 정보(AppConfig)를 넘기면 된다.
- XML 설정 사용
!! src > main > resources > appConfig.xml       // AppConig.java 랑 형식만 다를 뿐 동일하다.
   src > test > java > ... > xml > XmlAppContext.java
  : (최근에는 스프링 부트를 많이 사용하면서 XML 기반의 설정은 잘 사용하지 않는다.)
    GenericXmlApplicationContext 클래스를 사용하면서 xml 설정 파일을 넘기면 된다.

*스프링 빈 설정 메타 정보
!! src > test > java > ... > beandifinition > BeanDefinitionTest.java
- BeanDefinition에 대해서는 너무 깊이있게 이해하기 보다는 스프링이 다양한 형태의 설정 정보를 BeanDefinition으로 추상화해서 사용하는 것 정도만 이해하면 된다.

*웹 어플리케이션과 싱글톤
- 스프링은 태생이 기업용 온라인 서비스 기술을 지원하기 위해 탄생했다.
- 대부분의 스프링 애플리케이션은 웹 애플리케이션이다. 물론 웹이 아닌 애플리케이션 개발도 얼마든지 개발할 수 있다.
- 웹 애플리케이션은 보통 여러 고객이 동시에 요청을 한다.
- 우리가 만들었던 스프링 없는 순수한 DI 컨테이너인 AppConfig는 요청을 할 때 마다 객체를 새로 생성한다.
   ↳ src > test > java > ... > singleton > SingletonTest.java
- 고객 트래픽이 초당 100이 나오면 초당 100개 객체가 생성되고 소멸된다! 메모리 낭비가 심하다.
- 해결방안은 해당 객체가 딱 1개만 생성되고, 공유하도록 설계하면 된다. ⇒ 싱글톤 패턴

⭐싱글톤 패턴
- 클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인 패턴이다. ⇒ 객체 인스턴스를 2개 이상 생성하지 못하도록 막아야 한다.
- private 생성자를 사용해서 외부에서 임의로 new 키워드를 사용하지 못하도록 막아야 한다.
   ↳ src > test > java > ... > singleton > SingletonService.java
- static 영역에 객체 instance 를 미리 하나 생성해서 올려둔다.
- 객체 인스턴스가 필요하면 오직 getInstance() 메서드를 통해서만 조회할 수 있다. 이 메서드를 호출하면 항상 같은 인스턴스를 반환한다.
- 딱 1개의 객체 인스턴스만 존재해야 하므로, 생성자를 private 으로 막아서 혹시라도 외부에서 new 키워드로 객체 인스턴스가 생성되는 것을 막는다.
- 싱글톤 패턴을 구현하는 방법은 여러가지가 있는데 SingletonService.java 에서는 객체를 미리 생성해두는 가장 단순하고 안전한 방법을 선택했다.
- 문제점
  ·싱글톤 패턴을 구현하는 코드 자체가 많이 들어간다.
  ·의존관계상 클라이언트가 구체 클래스에 의존한다. ⇒ DIP를 위반한다.
  ·클라이언트가 구체 클래스에 의존해서 OCP 원칙을 위반할 가능성이 높다.
  ·테스트하기 어렵다.
  ·내부 속성을 변경하거나 초기화 하기 어렵다.
  ·private 생성자로 자식 클래스를 만들기 어렵다.
  ·결론적으로 유연성이 떨어진다.
  ·안티패턴으로 불리기도 한다.
 ⇒ 싱글톤 컨테이너를 사용하면 싱글톤의 문제점은 모두 해결되면서 싱글톤을 지킬 수 있다.

*싱글톤 컨테이너
!! src > test > java > ... > beandifinition > BeanDefinitionTest.java 의 springContainer (pureContainer 와 비교하면서 참고)
💡스프링 컨테이너는 싱글톤 패턴의 문제점을 해결하면서, 객체 인스턴스를 싱글톤(1개만 생성)으로 관리한다.
  지금까지 학습한 스프링 빈이 바로 싱글톤으로 관리되는 빈이다.
- 스프링 컨테이너는 싱글턴 패턴을 적용하지 않아도, 객체 인스턴스를 싱글톤으로 관리한다. (스프링 컨테이너가 객체를 하나만 생성한 후 관리하면서 공유해주듯이)
- 스프링 컨테이너는 싱글톤 컨테이너 역할을 한다.
- 싱글톤 객체를 생성하고 관리하는 기능을 싱글톤 레지스트리라 한다.
- 스프링 컨테이너의 이런 기능 덕분에 싱글톤 패턴의 모든 단점을 해결하면서 객체를 싱글톤으로 유지할 수 있다.
   ↳ 싱글톤 패턴을 위한 지저분한 코드가 들어가지 않아도 된다.
     DIP, OCP, 테스트, private 생성자로 부터 자유롭게 싱글톤을 사용할 수 있다. (private 를 사용하지 않아도 된다.)
 ⇒ 스프링 컨테이너 덕분에 고객의 요청이 올 때 마다 객체를 생성하는 것이 아니라, 이미 만들어진 객체를 공유해서 효율적으로 재사용할 수 있다.
(스프링의 기본 빈 등록 방식은 싱글톤이지만, 싱글톤 방식만 지원하는 것은 아니다. 요청할 때 마다 새로운 객체를 생성해서 반환하는 기능도 제공한다. 자세한 내용은 뒤에 빈 스코프에서 학습.)

*싱글톤 방식의 주의점
!! src > test > java > ... > singleton > StatefulService.java
   src > test > java > ... > singleton > StatefulServiceTest.java
- 싱글톤 패턴이든, 스프링 같은 싱글톤 컨테이너를 사용하든 객체 인스턴스를 하나만 생성해서 공유하는 싱글톤 방식은 여러 클라이언트가 하나의 같은 객체 인스턴스를 공유하기 때문에 싱글톤 객체는 상태를 유지(stateful)하게 설계하면 안된다.
- 무상태(stateless)로 설계해야 한다.
  ·특정 클라이언트에 의존적인 필드가 있으면 안된다. ⇒ 특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다.
  ·가급적 읽기만 가능해야 한다.
  ·필드 대신에 자바에서 공유되지 않는 지역변수, 파라미터, ThreadLocal 등을 사용해야 한다.
⭐️스프링 빈의 필드에 공유 값을 설정하면 정말 큰 장애가 발생할 수 있다.

*@Configuration 과 바이트코드 조작
!! src > test > java > ... > singleton > ConfigurationSingletonTest.java 의 configurationDeep
- 순수한 클래스라면 class hello.core.AppConfig 와 같이 출력되어야 하는데, 이건 class hello.core.AppConfig$$SpringCGLIB$$0 이렇게 CGLIB 가 붙어있다.
   ↳ 스프링이 CGLIB 라는 바이트코드 조작 라이브러리를 사용해서 AppConfig 클래스를 상속받은 임의의 다른 클래스를 만들고, 그 클래스를 스프링 빈으로 등록한 것이다.
- 스프링 빈에 등록된 그 다른 클래스가 싱글톤이 보장되도록 해주는 것이다.
- @Bean 이 붙은 메서드마다 이미 스프링 빈이 존재하면 존재하는 빈을 반환하고, 스프링 빈이 없으면 생성해서 스프링 빈으로 등록하고 반환하는 코드가 동적으로 만들어진다.
 ⇒ 그래서 ConfigurationSingletonTest.java 의 configurationTest 에서 call AppConfig.memberRepository 가 3번 호출될 것 같지만, 1번만 호출되는 것이다.
❓@Configuration 을 적용하지 않고, @Bean 만 적용한다면,
   ⇒ @Bean 만 사용해도 스프링 빈으로 등록되지만, 싱글톤을 보장되지 않는다. (new MemoryMemberRepository() 를 중복적으로 하는 것)
- 크게 고민할 것이 없다. 스프링 설정 정보는 항상 @Configuration 을 사용
