[필기장]

*객체 지향의 핵심은 다형성이지만 다형성만으로는 SOLID를 모두 지킬 수 없다.
*SOLID 원칙은 면접에서도 많이 나오는 개념이다. 중요!
*기능을 확장할 가능성이 없다면, 구현 클래스를 직접 사용하고 향후 꼭 필요할 때 리팩토링을 통해서 인터페이스를 도입하는 것도 좋다. (인터페이스를 도입하면 추상화라는 비용이 발생하기 때문)

+----------------------------------------------------------------------------------------------------------------------------------------------+
⭐좋은 객체지향프로그래밍
- 다형성이 가장 중요하다!
- 역할과 구현을 분리하여 유연하고 변경이 용이하다. (ex. 자동차 역할 / KIA 자동차 구현, 현대 자동차 구현 ⇒ KIA 자동차를 타다가 현대 자동차로 바껴도 운전자(클라이언트)는 무엇을 따로 배울 필요없이 운전이 가능하다.)
   ↳ 클라이언트는 역할만 알면 된다.
     클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
     클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.
     클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.
      ⇒ 역할 : 인터페이스 / 구현 : 인터페이스를 구현한 클래스, 구현 객체
        💡객체 설계 시, 인터페이스를 먼저 부여하고 그 역할을 수행하는 구현 객체 만들기
- 다형성_오버라이딩을 사용하여 역할과 구현을 분리
   ⇒ 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.
- 스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.
   ⇒ 스프링의 제어의 역전(IoC), 의존관계 주입(DI)은 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원한다.
🚨인터페이스(역할) 자체가 변하면 클라이언트, 서버 모두에 큰 변경이 발생한다. ⇒ 인터페이스를 안정적으로 잘 설계하는 것이 중요!!

⭐좋은 객체지향 설계의 5가지 원칙(SOLID)
  (클린코드로 유명한 '로버트 마틴'이 정리한 좋은 객체지향 설계의 5가지 원칙)
📌면접에서도 많이 나온다.
- SRP (단일 책임 원칙  Single Responsibility Principle)
  ·한 클래스는 하나의 책임만 가져야 한다. (하나의 책임이라는 것은 모호하다. 클 수 있고 작을 수 있다. 문맥과 상황에 따라 다르다.)
  ·중요한 기준은 변경이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것이다.
- OCP (개방-폐쇄 원칙  Open/Closed Principle)
  *가장 중요한 원칙이다.
  ·소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
  ·다형성을 활용 (역할과 구현의 분리)
  ·인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현
  ·구현 객체를 변경하려면 클라이언트 코드를 변경해야 한다. ⇒ OCP 원칙 지킬 수 없다.
   // private MemberRepository memberRepository = new MemoryMemberRepository();
   private MemberRepository memberRepository = new JdbcMemberRepository();
    ↳ 이 문제를 해결하기 위해, 객체를 생성하고 연관관계를 맺어주는 별도의 조립, 설정자가 필요하다. (나중에 코드를 통해 학습)
- LSP (리스코프 치환 원칙  Liskov Substitution Principle)
  ·프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
  ·다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것이다.
  ·다형성을 지원하기 위한 원칙이다.
  ·인터페이스를 구현한 구현체를 믿고 사용하려면 이 원칙이 필요하다.
  ·LSP 원칙을 지키지 않아도 컴파일 에러는 발생하지 않는다. 컴파일 성공하는 것을 넘어서는 이야기이다.
  ·ex) 자동차 인터페이스의 앞으로 가라는 엑셀 기능을 뒤로 가게 구현한다면 LSP 원칙을 위반한 것이다.
- ISP (인터페이스 분리 원칙  Interface Segregation Principle)
  ·특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
  ·자동차 인터페이스 → 운전 인터페이스, 정비 인터페이스로 분리
  ·사용자 클라이언트 → 운전자 클라이언트, 정비사 클라이언트로 분리
  ·분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않는다.
  ·인터페이스가 명확해지고, 대체 가능성이 높아진다.
- DIP (의존관계 역전 원칙  Dependency Inversion Principle)
  *OCP 원칙과 연관성이 있고 이 원칙도 중요하다.
  ·프로그래머는 추상화에 의존해야하고 구체화에 의존하면 안된다. 의존성 주입(DI)은 이 원칙을 따르는 방법 중 하나이다.
  ·구현 클래스에 의존하지 말고 인터페이스(역할)에 의존하라는 의미이다.
  ·클라이언트가 인터페이스에 의존해야 유연하게 구현체를 변경할 수 있다. 구현체에 의존하게 되면 변경이 아주 어려워진다.
  ·OCP 원칙을 위반하는 부분의 코드가 DIP 원칙도 위반한다. ↓
   private MemberRepository memberRepository = new MemoryMemberRepository();
   (인터페이스(MemberRepository)에 의존하지만, 구현 클래스(MemoryMemberRepository)도 동시에 의존하기 때문)
 ⇒ 다형성 만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경된다. (다형성만으로는 OCP, DIP 원칙을 지킬 수 없다.)

*객체지향 설계와 스프링
- 스프링은 아래의 기술로 다형성 + OCP, DIP를 가능하게 지원해준다.
   ↳ DI(Dependency Injection) : 의존 관계, 의존성 주입
     DI 컨테이너 제공
- 클라이언트 코드의 변경 없이 기능 확장
- 쉽게 부품 교체하듯이 개발

*비즈니스 요구사항과 설계
- 요구사항과 설계에서 확정되지 않은 부분을 확정될 때까지 무기한 기다릴 수 없기 때문에, 인터페이스를 만들고 구현체를 언제든지 갈아끼울 수 있도록 설계할 것이다.

‼️구현체를 만들 때, 구현체가 하나이면 관례상 클래스 이름에 "Impl"을 붙인다.

*회원(Member) 도메인 설계 및 개발
!! src > main > java > ... > member > *
- 회원 등급은 "일반"과 "VIP" 두 가지가 있다.
   ⇒ (enum) Grade.java
- 회원 정보로는 id, name, grade가 있다.
   ⇒ (회원 도메인?) Member.java   // 생성자와 getter, setter
- 일단, 메모리 회원 저장소를 사용했다.
   ⇒ (interface) MemberRepository.java
     (class) MemoryMemberRepository.java
- 회원 서비스는 "회원 가입"과 "회원 조회"가 가능하다.
   ⇒ (interface) MemberService.java
     (class) MemberServiceImpl.java

*주문(Order)과 할인(DiscountPolicy) 도메인 설계 및 개발
!! src > main > java > ... > discount > *
!! src > main > java > ... > order > *
- 회원 등급에 따라 할인 정책을 적용할 수 있다. → VIP 등급은 1000원 할인해주는 고정 금액 할인을 적용한다.
   ⇒ (interface) DiscountPolicy.java
     (class) FixDiscountPolicy.java
- 회원은 상품을 주문할 수 있다.
   ⇒ (interface) OrderService.java
     (class) OrderServiceImpl.java
- 주문 정보로는 회원id, 상품명, 상품가격, 할인가격이 있다. → DiscountPolicy의 구현체를 통해 할인가격을 추출하여 보내야한다.
   ⇒ (주문 도메인?) Order.java   // 생성자와 getter, setter과 할인 적용된 가격 반환해주는 메서드, toString()
